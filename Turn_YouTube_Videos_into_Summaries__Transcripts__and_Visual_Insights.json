{
  "name": "Turn YouTube Videos into Summaries, Transcripts, and Visual Insights",
  "nodes": [
    {
      "parameters": {},
      "id": "2b5e24c6-1d9f-46cf-a0ba-8a4f01b1db4d",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        2440,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "72590fa0-cf12-4249-80fc-7aaec9992390",
              "name": "automationID",
              "type": "string",
              "value": "optional-enter-reference-tracking-identifier"
            },
            {
              "id": "24e9b1c3-2955-4e0b-9b4b-a6b9d046fb72",
              "name": "apiKey",
              "type": "string",
              "value": "enter-your-api-key-here"
            },
            {
              "id": "b6600a42-1b8d-486a-a51d-0868bc45452e",
              "name": "youtubeURL",
              "type": "string",
              "value": "https://www.youtube.com/watch?v=Ovg_KfKxnC8"
            },
            {
              "id": "ce9a9a40-5ae4-4106-ae61-0daba2ec185f",
              "name": "promptType",
              "type": "string",
              "value": "transcript"
            }
          ]
        },
        "options": {}
      },
      "id": "c41e7672-36ff-4a5d-b939-984580ccef40",
      "name": "Set: Define Initial Variables",
      "type": "n8n-nodes-base.set",
      "position": [
        2940,
        240
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "4ba139e4-2fd7-473f-869d-f27a1a2f3823",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.promptType.toLowerCase() }}",
                    "rightValue": "transcript"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Transcript"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "486f3c1c-7203-4bc5-a796-87939d4360c5",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.promptType.toLowerCase() }}",
                    "rightValue": "timestamps"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Transcript with Timestamps"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "814597ad-12ff-450d-a4bc-cd2eb2836d8f",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.promptType.toLowerCase() }}",
                    "rightValue": "summary"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Summary"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "759debf2-3dfb-4bdd-b41f-7ef0a709e25e",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.promptType.toLowerCase() }}",
                    "rightValue": "scene"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Scene Description"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "5c66a390-2566-461d-b9bc-b0e7ebdc4af8",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.promptType.toLowerCase() }}",
                    "rightValue": "clips"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Clips"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "ae4f6823-9060-471d-8fd5-c6d0758a73ee",
      "name": "Switch: What kind of question do we want to ask?",
      "type": "n8n-nodes-base.switch",
      "position": [
        3580,
        180
      ],
      "typeVersion": 3.2,
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8be68e95-53df-492f-a88a-14c06f51f531",
              "name": "prompt",
              "type": "string",
              "value": "=Please provide a detailed description of the scene in the video, including:\n\nSetting: Where the scene takes place (e.g., indoors, outdoors, specific location). Be specific - is it a forest, a city street, a living room?\n\nObjects: Prominent objects visible in the scene (e.g., furniture, vehicles, natural elements). Include details like color, size, and material if discernible.\n\nPeople: Description of any people present, including their appearance (clothing, hair, etc.), approximate age, and any actions they are performing.\n\nLighting: The overall lighting of the scene (e.g., bright, dim, natural, artificial). Note any specific light sources (lamps, sunlight).\n\nColors: Dominant colors and color palettes used in the scene.\n\nCamera Angle/Movement: Describe the camera perspective (e.g., close-up, wide shot, aerial view) and any camera movement (panning, zooming, static).\n\nStart output directly with the response -- do not include any introductory text or explanations."
            },
            {
              "id": "bfa3b421-643d-4a52-93e9-0830f794140b",
              "name": "model",
              "type": "string",
              "value": "gemini-1.5-flash"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "c8f6f6a7-95ea-4288-8b79-6288ea5dca21",
      "name": "Set: Scene Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        4260,
        340
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8be68e95-53df-492f-a88a-14c06f51f531",
              "name": "prompt",
              "type": "string",
              "value": "=Provide a concise summary of the main points in nested bullets, using quotes only when absolutely essential for clarity. Start output directly with the response."
            },
            {
              "id": "ccc44699-0918-4837-89a6-c763b157fc8c",
              "name": "model",
              "type": "string",
              "value": "gemini-1.5-flash"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "6edb601e-a171-48ab-b3f7-a97049e30eb9",
      "name": "Set: Summarize Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        4260,
        140
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8be68e95-53df-492f-a88a-14c06f51f531",
              "name": "prompt",
              "type": "string",
              "value": "=Transcribe the video. Return only the spoken dialogue, verbatim. Omit any additional text or descriptions."
            },
            {
              "id": "b445c2da-934f-4a78-a57b-f383d8950f8a",
              "name": "model",
              "type": "string",
              "value": "gemini-1.5-flash"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "9cd243b1-9a16-4127-b093-d5778b670c97",
      "name": "Set: Transcript Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        4260,
        -260
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8be68e95-53df-492f-a88a-14c06f51f531",
              "name": "prompt",
              "type": "string",
              "value": "=Summarize this YouTube video with a focus on actionable insights. Use nested bullets and include relevant quotes. Specifically, highlight any recommended tools, strategies, or resources mentioned."
            },
            {
              "id": "da626eb8-a097-4a65-834d-4d1709aed260",
              "name": "model",
              "type": "string",
              "value": "gemini-1.5-flash"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "476146f0-b766-4b3c-a79e-c3282a249d5a",
      "name": "Set: Fallback",
      "type": "n8n-nodes-base.set",
      "position": [
        4260,
        740
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8be68e95-53df-492f-a88a-14c06f51f531",
              "name": "prompt",
              "type": "string",
              "value": "=Generate a timestamped transcript of the video. Each line must follow this format precisely:  [hh:mm:ss] Dialogue. Return only the timestamp and spoken content; omit any other text or formatting.  "
            },
            {
              "id": "98ca7af8-0fbd-4ba8-8fc8-f914e5bbe48a",
              "name": "model",
              "type": "string",
              "value": "gemini-1.5-flash"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "40f48eb9-0ab9-47cf-b024-986c6c0519d2",
      "name": "Set: Transcript with Timestamps Prompt",
      "type": "n8n-nodes-base.set",
      "position": [
        4260,
        -60
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8be68e95-53df-492f-a88a-14c06f51f531",
              "name": "prompt",
              "type": "string",
              "value": "=Extract shareable clips for social media. Each clip must include:\n\n* **Timestamp:** [hh:mm:ss]-[hh:mm:ss]\n* **Transcript:** Verbatim dialogue/text within the clip.\n* **Rationale:**  A concise explanation (under 20 words) of the clip's social media appeal (e.g., \"humorous,\" \"controversial,\" \"inspiring,\" \"informative\").  Focus on virality, engagement potential (shares, likes, comments).\n\nStart output directly with the response -- do not include any introductory text or explanations."
            },
            {
              "id": "0493ffa7-4fef-4e48-b9d7-7f0891660325",
              "name": "model",
              "type": "string",
              "value": "gemini-1.5-flash"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "808cbfa5-168b-429e-9fd7-1079b33afdf0",
      "name": "Set: Scene Clips",
      "type": "n8n-nodes-base.set",
      "position": [
        4260,
        540
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "# How to Use This Workflow\n\nVideo Overview: [https://www.youtube.com/watch?v=Ovg_KfKxnC8](https://www.youtube.com/watch?v=Ovg_KfKxnC8)\n\nUse this workflow to analyze YouTube videos effortlessly. Start by requesting a summary or transcript—then refine the prompts to fit your needs and the type of content you're working with.\n\nEven more impressive? You can ask specific questions about what’s happening in a video—identifying people, scenes, and visual details. The ability to extract this level of insight is game-changing.\n\nThis workflow is highly adaptable—actions adjust based on the values you set. With a single flow, you can generate transcripts, create detailed YouTube descriptions, and draft summary blog posts.\n\nTriggers are flexible, too. Run it manually, connect it to a webhook, or automate it through Airtable or another system. The output can go anywhere -- Notion, Google Docs, CMS platforms -- or simply stay in n8n for on-the-fly analysis.\n\nThis workflow was created using n8n 1.82.3.\n\n## Requirements\n* [Google API key](https://console.developers.google.com/) (or obtain via [AI Studio](https://aistudio.google.com/apikey))\n\n## Testing\n* This workflow was tested on an assortment of public YouTube videos from shorts up to about an hour in length.\n\n## Future-proofing\n* This workflow was created for use with gemini-1.5-flash. In the future, the set nodes for prompts could be updated to use different models and possibly add in what API endpoint should be used in the http node.\n\n## Documentation\n* [Explore vision capabilities with the Gemini API](https://ai.google.dev/gemini-api/docs/vision?lang=python)\n* [Pricing](https://ai.google.dev/gemini-api/docs/pricing)",
        "height": 820,
        "width": 780
      },
      "id": "4df683d0-3561-4844-9d97-186bbd327ff4",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        -480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "300bfbe7-8d13-41ba-8828-17bba1d0eabe",
              "name": "answerAIGenerated",
              "type": "string",
              "value": "={{ $json.candidates?.[0]?.content?.parts?.[0]?.text ? $json.candidates[0].content.parts[0].text : ($json.error ? $json.error : \"No content or error found\") }}"
            },
            {
              "id": "a54eeb5d-e4de-4fd9-a15c-be51cc414c46",
              "name": "promptTokenCount",
              "type": "string",
              "value": "={{ $json.usageMetadata?.promptTokenCount ? $json.usageMetadata.promptTokenCount : ($json.error ? $json.error : \"No content or error found\") }}"
            },
            {
              "id": "dd590788-069e-48d9-adb2-6a5d10f8af2f",
              "name": "candidatesTokenCount",
              "type": "string",
              "value": "={{ $json.usageMetadata?.candidatesTokenCount ? $json.usageMetadata.candidatesTokenCount : ($json.error ? $json.error : \"No content or error found\") }}"
            },
            {
              "id": "23766495-25df-4d3d-bc62-9e79a860ee19",
              "name": "totalTokenCount",
              "type": "string",
              "value": "={{ $json.usageMetadata?.totalTokenCount ? $json.usageMetadata.totalTokenCount : ($json.error ? $json.error : \"No content or error found\") }}"
            },
            {
              "id": "cfad5ba2-a2c5-48ff-b64b-9131a51fd23c",
              "name": "modelVersionUsed",
              "type": "string",
              "value": "={{ $json.modelVersion ? $json.modelVersion : ($json.error ? $json.error : \"No content or error found\") }}"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "except",
        "excludeFields": "candidates, usageMetadata",
        "options": {}
      },
      "id": "f35d73c2-a476-4185-87e9-a96070fffc0e",
      "name": "Set Fields: Define Outcome",
      "type": "n8n-nodes-base.set",
      "position": [
        6580,
        240
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/{{ $json.model }}:generateContent?key={{ $json.apiKey }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\": [\n      { \"text\": {{ JSON.stringify($json.prompt) }} },\n      { \"file_data\": { \"file_uri\": \"{{ $json.youtubeURL }}\" } }\n    ]\n  }]\n}",
        "options": {}
      },
      "id": "bc84fd7c-b959-4b8a-bce8-77efe31cec40",
      "name": "HTTP Request to Google",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        5520,
        240
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "includeOtherFields": true,
        "options": {}
      },
      "id": "5898c87a-6548-4d7f-8a86-a9e54d83e35d",
      "name": "Set: Merged Values",
      "type": "n8n-nodes-base.set",
      "position": [
        5160,
        240
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "148e9a72-f826-468c-86a3-471873717ed4",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "3e58aad5-833a-43f9-816f-f37dd14c2ccc",
      "name": "If: Was an error detected?",
      "type": "n8n-nodes-base.if",
      "position": [
        6340,
        900
      ],
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Prompt Inspiration Ideas\n\nUse these prompts as inspiration for your workflow. A quick way to iterate on ideas is to try them in [https://aistudio.google.com/](https://aistudio.google.com/).\n\n### 📝 Essential Video Summarizer (Quick Content Digestion)\nProvide a concise summary of the main points of this YouTube video in nested bullets, using quotes only when absolutely essential for clarity.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### 🚀 Complete YouTube SEO Package Generator (Content Marketing)\n\nGenerate a complete YouTube package (Title, Description, Keywords, and Timestamps) based on the following transcript:\n\n**Instructions:**\n\n* **Title:** Craft a concise and engaging title (under 60 characters) that accurately reflects the video's content and will attract viewers.  \n* **Description:** Write a detailed description (around 150-200 words) summarizing the key topics covered in the video.  This description should:\n    * Clearly outline the value proposition for the viewer (what they will learn or gain).\n    * Include relevant keywords to improve searchability.\n    * Feature a strong call to action (e.g., subscribe, visit a website, follow on social media).\n    * Optionally include a brief, intriguing hook at the beginning to grab the viewer's attention.\n* **Keywords:** Generate a list of relevant keywords and tags (around 10-15) that accurately describe the video's content and will help viewers find it in search results.  Consider:\n    * Specific topics discussed\n    * Related terms and concepts\n    * Industry jargon (if applicable)\n    * Names of people or products mentioned\n* **Timestamps:**  Generate timestamps for key topics or sections within the video. These should be formatted clearly for easy navigation.  For example:\n    * 0:00 Introduction\n    * 1:15 Topic 1\n    * 3:45 Topic 2 ...etc.  \n\n**Important Considerations:**\n\n* **Target Audience:** Assume the target audience is [Describe your target audience – e.g., beginners learning Python, experienced marketers, people interested in gardening].\n* **Overall Tone:** The tone of the entire package should be [Specify the desired tone – e.g., informative and educational, enthusiastic and engaging, humorous and lighthearted].\n* **Video's Purpose:** The primary goal of the video is to [State the video's objective – e.g., teach a skill, provide information, entertain, persuade].\n\n\n**Optional:**\n* If the video promotes a product, service, or other content, include relevant links in the description.\n* If there are any specific phrases or branding elements that should be included, specify them here.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### 🗺️ Structured Video Content Map (Educational Organization)\n\nSummarize the key points of this YouTube video with no introductory text. Follow this structured format:\n\nMain Topics\n* Organize content using Level 2 headers (##) based on key themes.\n\nUnder each header:\n* List only the most essential concepts using concise bullet points.\n* Ensure technical accuracy while maintaining clarity.\n\nOrganize sections in this order when applicable:\n* Overview & Context\n* Core Concepts & Features\n* How It Works\n* Benefits & Drawbacks\n\nFormatting Rules:\n* Use Markdown for structured readability.\n* Keep bullet points simple (avoid nesting).\n* No summaries, conclusions, or extra explanations -- just structured content.\n\n### 🎯 Goal-Oriented Learning Digest (Personal Development)\n\nI'm trying to learn about [Specific Goal, e.g., \"how to improve my public speaking skills,\" \"the latest trends in web development\"]. Summarize the relevant information using nested bullets and quotes, focusing on how it helps me achieve this goal.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### ⚙️ Actionable Insights Framework (Implementation Planning)\n\nExtract actionable insights with a focus on practical applications and recommendations.\n\nStart output directly with the response—do not include any introductory text or explanations.\n\nFormat the summary using markdown and follow this structure:\n\nProblem Statement\n* Summarize the core issue or topic addressed.\n\nKey Solutions & Recommendations\n* Use separate ## headers for each major solution or recommendation.\n\nImplementation Steps:\n* Under each solution, list key steps using bullet points.\n\nExpected Outcomes & Benefits:\n* Describe the potential impact and advantages of each solution.\n\nResources & Tools\n* List any relevant tools, frameworks, or resources mentioned.\n\n### 💡 Concept Extractor with Supporting Quotes (Deep Content Analysis)\n\nExtract the core concepts presented using nested bullets. Include supporting quotes for each concept. Focus on [Specific Topic/Area, e.g., \"the impact of AI on marketing,\" \"the principles of effective communication,\" etc.].\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n\n### 👥 Audience-Targeted Video Analysis (Professional Development)\n\nAnalyze this video for a target audience of [Specify Target Audience, e.g., \"software engineers,\" \"marketing professionals,\" \"general readers\"].\n\nFormat the summary using markdown and structure it as follows:\n\nMain Topics\nOrganize key points under Level 2 headers (##), focusing on essential insights.\nSuggested sections (adjust as needed):\nOverview (context & background)\nKey Concepts & Features\nHow It Works (technical or practical explanation)\nBenefits & Challenges\nKey Instructions:\n\nTailor content to the [Target Audience] and their expected level of expertise.\nUse bullet points for clarity and conciseness.\nBold key terms to emphasize important ideas.\nEnsure technical accuracy, simplifying complex ideas only when needed.\nUse tables when making comparisons.\nLength Guidance:\n\nSummarize in approximately [Specify Desired Length, e.g., \"200 words,\" \"500 words,\" \"one page\"].\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### 🧠 Knowledge Extension Analyzer (Advanced Learning & Analysis)\n\nAssuming I already understand [briefly state relevant background knowledge], provide specific insights that build upon this knowledge. Use nested bullets and relevant quotes.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### 🔍 Argument Analysis Blueprint (Critical Thinking)\n\nAnalyze the argument presented in this video. Outline the main claims and supporting evidence using nested bullets. Include direct quotes to illustrate key points. Identify any potential counterarguments or weaknesses in the reasoning.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### ⚖️ YouTube Argument Analyzer (Debate & Rhetoric)\n\nAnalyze the argument presented in this YouTube video. Outline the main claims and supporting evidence using nested bullets. Include direct quotes to illustrate key points. Identify any potential counterarguments or weaknesses in the reasoning.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n### 🎭 Rhetorical Technique Evaluator (Communication Analysis)\n\nAnalyze the speaker's [e.g., presentation style, persuasive techniques, use of rhetoric]. Use nested bullets and include specific quotes to illustrate your observations. Focus on how these techniques contribute to (or detract from) the video's overall message.\n\nStart output directly with the response -- do not include any introductory text or explanations.\n\n",
        "height": 3580,
        "width": 780
      },
      "id": "6075c537-c1d8-48df-9bcd-cb1dbc6a64a4",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1440,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "return {\n  json: {\n    ...$json, // Keep data from http request\n    ...$('Set: Merged Values').item.json, // Keep data from before http request\n  }\n};\n\n\n\n"
      },
      "id": "3a56d5e5-af01-4419-b249-cafceb98768a",
      "name": "Code: Merge data from prior nodes with HTTP Output",
      "type": "n8n-nodes-base.code",
      "position": [
        6120,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## ✏️ Set Values For Use in Flow\n1. automationID: Use this to reference the automation. Useful for troubleshooting when you have lots of flows running.\n2. apiKey: API key from Google\n3. youtubeURL: Public URL for video to be processed\n4. promptType: Used by switch node and determines which prompt is sent as part of API call.",
        "height": 520,
        "width": 560
      },
      "id": "bba1a1e3-be13-414a-99d7-adab2b05e594",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2700,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ℹ️ Determine which prompt will be passed in API call based on promptType value\n",
        "height": 520,
        "width": 560
      },
      "id": "92d4e16f-8704-428e-b1c5-0edf83c16b1e",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3320,
        40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ✏️ Set Values For Prompts & Model\n1. prompt: What do you want to know about a video\n2. model: Which model to use (gemini-1.5-flash)",
        "height": 1520,
        "width": 560
      },
      "id": "dad24ffe-caae-4c34-8b3d-04e3da7cc33d",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        4060,
        -460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ℹ️ Making it easier to reference values in the http node\n",
        "height": 520,
        "width": 260
      },
      "id": "b4f3b7f6-b229-4c9f-a1dd-220108124773",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5080,
        60
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ℹ️ If you want to add special processing when errors occur (Optional)\n\n",
        "height": 520,
        "width": 560
      },
      "id": "323a51d5-d0ce-412c-8912-9dfeaf488e53",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        6200,
        700
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ℹ️ Makes call to Google endpoint using values set in earlier nodes\n\n",
        "height": 520,
        "width": 260
      },
      "id": "9bf0554b-1738-4d6f-83c4-1465bd49308f",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        5460,
        60
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ℹ️ Merges data from returned by Google with values set in prior nodes so that earlier data isn't lost",
        "height": 520,
        "width": 300
      },
      "id": "b6251790-6898-4e11-8be8-2ded4f70c1c4",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        6020,
        60
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## ℹ️ Gives returned data meaningful names; Simplifies amount of data available to follow-on nodes",
        "height": 520,
        "width": 300
      },
      "id": "c1bd8b1b-b0ee-4f95-a8f4-a45df10ae244",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        6480,
        60
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### 💡 Trigger Ideas\nYou can change the trigger to meet your use case. If you need to run it once in awhile, can leave in current format. Try one of n8n's YouTube nodes, a form, a webhook, etc. for running more frequently as part of an automation.",
        "width": 360
      },
      "id": "c68a3def-61ad-49d9-bf5d-4fe4f1793a36",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2320,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### 💡 Next Step Ideas\nUse a webhook to send data to another destination or use one of n8n's other nodes to send to Airtable, Notion, etc.",
        "height": 240,
        "width": 360
      },
      "id": "7a28b1a2-dee2-4fab-a8d3-62df6bb7152c",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        6900,
        220
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Set: Define Initial Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Define Initial Variables": {
      "main": [
        [
          {
            "node": "Switch: What kind of question do we want to ask?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch: What kind of question do we want to ask?": {
      "main": [
        [
          {
            "node": "Set: Transcript Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set: Transcript with Timestamps Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set: Summarize Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set: Scene Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set: Scene Clips",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set: Fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Scene Prompt": {
      "main": [
        [
          {
            "node": "Set: Merged Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Summarize Prompt": {
      "main": [
        [
          {
            "node": "Set: Merged Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Transcript Prompt": {
      "main": [
        [
          {
            "node": "Set: Merged Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Fallback": {
      "main": [
        [
          {
            "node": "Set: Merged Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Transcript with Timestamps Prompt": {
      "main": [
        [
          {
            "node": "Set: Merged Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Scene Clips": {
      "main": [
        [
          {
            "node": "Set: Merged Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request to Google": {
      "main": [
        [
          {
            "node": "Code: Merge data from prior nodes with HTTP Output",
            "type": "main",
            "index": 0
          },
          {
            "node": "If: Was an error detected?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set: Merged Values": {
      "main": [
        [
          {
            "node": "HTTP Request to Google",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code: Merge data from prior nodes with HTTP Output": {
      "main": [
        [
          {
            "node": "Set Fields: Define Outcome",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b09773ab-a807-44b6-8c10-d39cdf0a0515",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "402b1b975df4b5edf692af4f00b1a88a27528c657bdf47d8f3ac83d12c88a3bc"
  },
  "id": "CTxJVEZjGOnGq8Ji",
  "tags": []
}